window.translatableTexts = {
    en: {
        generalImplementInSubClass: `{functionName} must be implemented in subclass.`,
        generalClassIsAbstract: 'This is an abstract class. You must extend it with a subclass.',
        generalMissingProperty: 'Property "{name}" is required.',
        hexArrayFailedToCreate: 'Fail to create hex array: {e}.',
        hexArrayFailedToGet: 'Fail to get hex with coord ({q}, {r}): {e}.',
        hexArrayFailedToGetByKey: 'Fail to get hex with key ({key}): {e}.',
        invalidDisplayMode: `Invalide display mode "{mode}".`,
        noDefaultZoomLevelFound: `No default zoom level found for display mode "{mode}".`,
        noDefaultZoomLevelDataFound: `Default zoom level contains no data for display mode "{mode}".`,
        noZoomInStorage: `No zoom level found in local storage.`,
        fallBackToDefaultZoomLevel: `Falling back to default zoom level.`,
        noZoomLevelDataFound: `Mode {mode} does not have zoom level {zoomLevel}.`,
        invalidNumberOfHexes: `Invalid number of hexes: expected positive integer, got {value}.`,
        noPreCachedZoomLevelDataFound: `Mode {mode} does not have pre-cached data for zoom level {zoomLevel}.`,
        // noMinMaxQSFoundForRow: `No min max q, s data found for row {row}.`, // CONSIDER TO REMOVE
        invalidHexDirection: `Failed to transver hex grid due to invalid direction '{direction}'.`,
        hexTransverseInvalidStart: `Failed to transver hex grid due to invalid starting coord ({q}, {r}, {s}).`,
        failedToGetStartHex: `Failed to get hex at camera offset {offset}, {offsetY}.`,
        scriptLoaderImportedCss: `Imported css file "{modPath}" from mod "{modName}".`,
        scriptLoaderImportedCssFailed: `Failed to import css file "{modPath}" from mod "{modName}": {e}.`,
        invalidModSettingListEntry: `Invalid list entry at index {index}: missing or empty modName or dirName. Skipping entry.`,
        methodHookLoaded: `Loaded method-hook from mod "{modName}" at "{modFile}" (class "{className}", method "{methodName}", hook "{mode}").`,
        methodHookFailed: `Failed to load method-hook from mod "{modName}" at "{modFile}": {e}`,
        newMethodLoaded: `Loaded new method from mod "{modName}" at "{modFile}" (class "{className}", new method "{methodName}").`,
        newMethodFailed: `Failed to load new method from mod "{modName}" at "{modFile}": {e}`,
        newClassNoExport: `Mod "{modName}" at "{modPath}" has no valid exports.`,
        newClassExists: `Mod "{modName}" overwrites existing class "{className}".`,
        newClassLoaded: `Mod "{modName}" registered new class "{className}".`,
        unexpectedScriptLoadFailed: `Failed to load "{modFile}" from mod "{modName}": {e}. SOME OR ALL FILE CONTENT MIGHT NOT BE LOADED.`,
        methodHookInvalidInfo: `Invalid hookInfo: must specify className, methodName, mode, and handler function.`,
        methodHookNoClass: `Class "{className}" not found.`,
        methodHookNoMethod: `Method "{methodName}" not found on class "{className}"{isStatic}.`,
        methodHookErrorCode: `Error in mod "{modName}" hook "{mode}" on {className}.{methodName}: {e}`,
        methodHookUnknownMode: `Unknown hook mode "{mode}".`,
        methodHookBeforeError: `Error in mod "{modName}" before hook on {className}.{methodName}: {e}`,
        methodHookReplaceError: `Error in mod "{modName}" replace hook on {className}.{methodName}: {e}`,
        methodHookReplaceErrorOriginal: `Error in original method {className}.{methodName}: {e}`,
        methodHookAfterError: `Error in mod "{modName}" after hook on {className}.{methodName}: {e}`,
        newMethodInvalidInput: `Missing class name, method name, or handler.`,
        newMethodInvalidClassName: `Class "{className}" not found.`,
        newMethodMethodExists: `Method "{methodName}" already exists on {isStatic} of class "{className}".`,
        newMethodAdded: `Added new {isStatic} method "{methodName}" to class "{className}".`,
        newMethodError: `Error adding method "{methodName}" to class "{className}": {e}`,
        reservedModNameFound: `"{modName}" is a reserved name. This mod will not be loaded.`,
        unknownMethodMod: `Failed to load "{modFile}" from mod "{modName}": Unknown mode "{mode}."`,
        badModDataStructure: `Mod "{modName}" at "{modFile}" contains bad data structure: {e}. Item was not loaded.`,
        invalidModDataStructure: `Mod "{modName}" at "{modFile}" contains bad data structure: Property "modData" is missing or not an array. ALL FILE CONTENT WAS NOT LOADED.`,
        invalidModDataItemNotObject: `Item at index {i} is not an object`,
        dataLoaderSuccessful: `Successfully loaded modData (data type "{dataType}", name "{name}") from mod "{modName}").`,
        dataLoaderFailed: `Failed to process modData (data type "{dataType}", name "{name}" from mod "{modName}"): {e}.`,
        dataLoaderErrorItemMissingProperty: `Item object does not have the following required property: {missingKeyList}`,
        dataLoaderErrorPropertyMustBeString: `Property "{name}" must be a string`,
        dataLoaderErrorInvalidPayload: `Property {name} must be either an object or an array`,
        modDataTreeLabelLastModifiers: 'Last modifiers',
        modDataTreeLabelNoModifier: 'None',
        modDataTreeLabelCloseButton: 'Close',
        modDataTreeLabelSearchPlaceholder: 'Type 3 characters or more to search',
        modDataTreeLabelSortBy: 'Sort by',
        modDataTreeLabelOrder: 'Order',
        modDataTreeLabelAll: 'All',
        modDataTreeLabelPath: 'Path',
        modDataTreeLabelCreator: 'Creator',
        modDataTreeLabelModifier: 'Modifier',
        modDataTreeLabelValue: 'Value',
        modDataTreeLabelModCount: 'Mod count',
        modDataTreeLabelNoResult: 'No results found for search term "{term}".',
        modDataTreeLabelSearchSummary: '{count} results found for search term "{term}".',
        modAssetMissingDataType: 'Subclasses of ModAsset must define static DataType!',
        regionNoCornerHexFound: 'Cannot find hex for corner {corner} at ({x}, {y})',
        generatorMapSizeValueRequired: 'Size value is required for texture "{tileName}", region list "{regionList}", index {index}.',
        generatorMapFailedToCreateRegion: 'Failed to create region {name}: {e}.',
        generatorMapCircularDependency: 'Circular dependency detected for regions: {regionName}.',
        generatorMapMissingDependency: 'Missing dependency "{depName}" for region "{regionName}".',
        generatorMapRegionCreated: 'Region "{regionName}" was created succesfully and contains {hexNum} hex(es).',
        generatorMapUnknownTile: 'Tile data for "{tileName}" not found',
        generatorMapUnknownRegion: 'No data found for region "{regionKey}" in map template "{templateMapName}".',
        generatorMapInvalidHex: 'Invalid hex with key "{key}" found in tile map ({tileType}).',
        generatorMapInvalidDefaultTileName: 'Cannot find data of default tile "{defaultTileName}"',
        generatorMapInvalidHexData: 'Hex ({q}, {r}, {key} is missing _regionListStr or _patchIndex.',
        generatorMapNoFeatureDefFound: 'No feature definition found for region list "{regionListStr}" at index {index}.',
        generatorMapDone: 'Random map generation done with seed {seed}.',
        generatorMapInvalidOrientation: 'Invalid orientation "{orientation}". Allowed values: {allowedValues}. Patch will be skipped.',
        generatorMapMissingTrackedLastStep: 'No tracked last step found for texture "{tileName}", region list "{regionList}", index {index}.',
        templateMapUnknownFeature: 'Unknown feature "{featureName}" found in map template map "{templateMapName}".',
    },
};